[{"path":"https://davisvaughan.github.io/crossfit/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 crossfit authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://davisvaughan.github.io/crossfit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"https://davisvaughan.github.io/crossfit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2022). crossfit: Package (One Line, Title Case). https://github.com/DavisVaughan/crossfit, https://davisvaughan.github.io/crossfit/.","code":"@Manual{,   title = {crossfit: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2022},   note = {https://github.com/DavisVaughan/crossfit, https://davisvaughan.github.io/crossfit/}, }"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Key-value lists used as arguments to cf functions — cf-data","title":"Key-value lists used as arguments to cf functions — cf-data","text":"set incomplete still useful key-value lists map query parameter interest underlying integer string value used actual request string. example, Women division query parameter value 2L, can use cf_division$Women anywhere see division argument. cf_scale: scale used workout. Includes rx, scaled, foundations scales. cf_competition: competition retrieve data . two important open games. cf_region: region filter . can tell, using worldwide region pull data, can filter . incomplete set data. cf_division: division retrieve data . relevant Men Women, can also filter age group, like Women (50-54). incomplete set data.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key-value lists used as arguments to cf functions — cf-data","text":"","code":"cf_scale  cf_competition  cf_region  cf_division"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Key-value lists used as arguments to cf functions — cf-data","text":"object class list length 3. object class list length 7. object class list length 7. object class list length 36.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Key-value lists used as arguments to cf functions — cf-data","text":"","code":"cf_scale #> $rx #> [1] 0 #>  #> $scaled #> [1] 1 #>  #> $foundations #> [1] 2 #>"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-request.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level requests to the CrossFit API — cf-request","title":"Low level requests to the CrossFit API — cf-request","text":"low level functions constructing requests CrossFit API. can use build custom requests along data objects wrapped functions provide enough flexibility hit endpoint like see. aware certain endpoints may lose support query parameters go back time. Additionally different endpoints require different query parameters, none documented CrossFit side. cf_request() creates base request object particular competition/year combination. Always start object. can layer additional query parameter modifiers: cf_req_division(): Request particular division. set divisions can seen cf_division. cf_req_region(): Request particular region. set regions can seen cf_region. easiest use cf_region$worldwide. cf_req_scale(): Request particular scale (Rx, Scaled, Foundations). set scales can seen cf_scale. cf_req_limit(): Alter number returned rows. Default seems 50 set anything, maximum value 100. cf_req_affiliate(): Request particular affiliate's data. look affiliate's ID CrossFit website. generally URL affiliate's webpage. cf_req_page(): Alter current page, .e. use pagination. process response resp_body_json() look resp$pagination, typically information page currently many pages data available.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level requests to the CrossFit API — cf-request","text":"","code":"cf_request(competition, year)  cf_req_division(req, division)  cf_req_region(req, region)  cf_req_scale(req, scale)  cf_req_limit(req, limit)  cf_req_affiliate(req, affiliate)  cf_req_page(req, page)"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low level requests to the CrossFit API — cf-request","text":"competition competition. One values cf_competition. year single integer year retrieve data . req request object cf_request() modify. division division. One values cf_division. region region. One values cf_region. scale workout scaling. One values cf_scale. limit number rows return. single integer [0, 100]. affiliate single integer affiliate ID return data . page single integer \"current page\" retrieve data .","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low level requests to the CrossFit API — cf-request","text":"request object.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf-request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low level requests to the CrossFit API — cf-request","text":"","code":"library(tidyr) library(tibble) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # ---------------------------------------------------------------------------  # Top two from the crossfit open 2022, Men's Rx resp <- cf_request(cf_competition$open, 2022) %>%   cf_req_division(cf_division$Men) %>%   cf_req_region(cf_region$worldwide) %>%   cf_req_scale(cf_scale$rx) %>%   cf_req_limit(2L) %>%   req_perform() %>%   resp_body_json()  # Some pagination information here! resp$pagination #> $totalPages #> [1] 77408 #>  #> $totalCompetitors #> [1] 154815 #>  #> $currentPage #> [1] 1 #>   leaderboard <- tibble(rows = resp$leaderboardRows) leaderboard #> # A tibble: 2 × 1 #>   rows             #>   <list>           #> 1 <named list [6]> #> 2 <named list [6]>  leaderboard %>%   unnest_wider(rows) #> # A tibble: 2 × 6 #>   overallRank overallScore nextStage ui               entrant           scores #>   <chr>       <chr>        <chr>     <list>           <list>            <list> #> 1 1           25           \"\"        <named list [2]> <named list [20]> <list> #> 2 2           28           \"\"        <named list [2]> <named list [20]> <list>  leaderboard %>%   unnest_wider(rows) %>%   unnest_wider(entrant) #> # A tibble: 2 × 25 #>   overallRank overallScore nextStage ui           competitorId competitorName #>   <chr>       <chr>        <chr>     <list>       <chr>        <chr>          #> 1 1           25           \"\"        <named list> 310970       Saxon Panchik  #> 2 2           28           \"\"        <named list> 1454081      Matt Poulin    #> # … with 19 more variables: firstName <chr>, lastName <chr>, status <chr>, #> #   postCompStatus <chr>, gender <chr>, profilePicS3key <chr>, #> #   countryOfOriginCode <chr>, countryOfOriginName <chr>, #> #   countryShortCode <chr>, regionId <chr>, regionName <chr>, divisionId <chr>, #> #   affiliateId <chr>, affiliateName <chr>, age <chr>, height <chr>, #> #   weight <chr>, teamCaptain <chr>, scores <list>  # 2022's 3 workouts workouts <- leaderboard %>%   unnest_wider(rows) %>%   unnest_wider(entrant) %>%   hoist(scores, one = 1, two = 2, three = 3)  # Let's look at 22.1 workouts %>%   select(competitorName, one) %>%   unnest_wider(one) %>%   select(competitorName, rank, score, scoreDisplay, breakdown) #> # A tibble: 2 × 5 #>   competitorName rank  score   scoreDisplay breakdown                            #>   <chr>          <chr> <chr>   <chr>        <chr>                                #> 1 Saxon Panchik  3     3800000 380 reps     \"12 rounds +\\n3 wall walks\\n12 db s… #> 2 Matt Poulin    10    3640000 364 reps     \"12 rounds +\\n3 wall walks\\n1 db sn…  # ---------------------------------------------------------------------------  # Top five from the crossfit games 2021 Women's division resp <- cf_request(cf_competition$games, 2021) %>%   cf_req_division(cf_division$Women) %>%   cf_req_limit(5L) %>%   req_perform() %>%   resp_body_json()  leaderboard <- tibble(rows = resp$leaderboardRows) leaderboard #> # A tibble: 5 × 1 #>   rows             #>   <list>           #> 1 <named list [6]> #> 2 <named list [6]> #> 3 <named list [6]> #> 4 <named list [6]> #> 5 <named list [6]>  # Toomey, of course leaderboard %>%   unnest_wider(rows) %>%   unnest_wider(entrant) #> # A tibble: 5 × 25 #>   overallRank overallScore nextStage ui           competitorId competitorName    #>   <chr>       <chr>        <chr>     <list>       <chr>        <chr>             #> 1 1           1435         \"\"        <named list> 163097       Tia-Clair Toomey  #> 2 2           1179         \"\"        <named list> 591912       Laura Horváth     #> 3 3           1099         \"\"        <named list> 18588        Annie Thorisdott… #> 4 4           1064         \"\"        <named list> 120480       Kristin Holte     #> 5 5           995          \"\"        <named list> 671666       Haley Adams       #> # … with 19 more variables: firstName <chr>, lastName <chr>, status <chr>, #> #   postCompStatus <chr>, gender <chr>, profilePicS3key <chr>, #> #   countryOfOriginCode <chr>, countryOfOriginName <chr>, #> #   countryShortCode <chr>, regionId <chr>, regionName <chr>, divisionId <chr>, #> #   affiliateId <chr>, affiliateName <chr>, age <chr>, height <chr>, #> #   weight <chr>, teamCaptain <chr>, scores <list>  # There are actually 15 workouts here, let's just pick the first workouts <- leaderboard %>%   unnest_wider(rows) %>%   unnest_wider(entrant) %>%   hoist(scores, one = 1)  workouts %>%   select(competitorName, one) %>%   unnest_wider(one) %>%   select(competitorName, rank, score) #> # A tibble: 5 × 3 #>   competitorName     rank  score #>   <chr>              <chr> <chr> #> 1 Tia-Clair Toomey   1     100   #> 2 Laura Horváth      8     79    #> 3 Annie Thorisdottir 18    49    #> 4 Kristin Holte      11    70    #> 5 Haley Adams        5     88"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_games.html","id":null,"dir":"Reference","previous_headings":"","what":"CrossFit Games — cf_games","title":"CrossFit Games — cf_games","text":"cf_games() retrieves data CrossFit Games API, lightly pre-processed. need low level access API, use cf_request(). data returned API, empty tibble zero columns zero rows returned. typically need use tidyr::unnest_wider() tidyr::hoist() process data.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_games.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CrossFit Games — cf_games","text":"","code":"cf_games(   year,   ...,   division = cf_division$Men,   n_pages = NULL,   progress = TRUE )"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_games.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CrossFit Games — cf_games","text":"year year retrieve data . Note parameters valid past years. ... dots future extensions must empty. division division retrieve data . One values cf_division. n_pages optional integer limit number pages returned. page maximum 100 rows returned. useful just want explore data without downloading . specified, download available data. progress progress bar shown longer downloads?","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_games.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CrossFit Games — cf_games","text":"tibble.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_games.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CrossFit Games — cf_games","text":"","code":"library(tidyr) library(dplyr)  games <- cf_games(2021)  # 15 workouts in the 2021 CrossFit games games %>%   unnest_wider(entrant) %>%   hoist(scores, two = 2) %>%   select(competitorName, two) %>%   unnest_wider(two) %>%   select(competitorName, score, breakdown) #> # A tibble: 40 × 3 #>    competitorName            score breakdown #>    <chr>                     <chr> <chr>     #>  1 Justin Medeiros           58    58 pts    #>  2 Patrick Vellner           100   100 pts   #>  3 Brent Fikowski            82    82 pts    #>  4 Björgvin Karl Guðmundsson 76    76 pts    #>  5 Saxon Panchik             61    61 pts    #>  6 Jonne Koski               70    70 pts    #>  7 Guilherme Malheiros       85    85 pts    #>  8 Alex Vigneault            52    52 pts    #>  9 Lazar Đukić               64    64 pts    #> 10 Noah Ohlsen               40    40 pts    #> # … with 30 more rows  # What affiliates were the top 20 associated with? # (This is also a way to find an affiliate ID) games %>%   unnest_wider(entrant) %>%   slice(1:20) %>%   select(competitorName, affiliateId, affiliateName) #> # A tibble: 20 × 3 #>    competitorName            affiliateId affiliateName             #>    <chr>                     <chr>       <chr>                     #>  1 Justin Medeiros           1792        \"CrossFit Fort Vancouver\" #>  2 Patrick Vellner           1918        \"CrossFit Nanaimo\"        #>  3 Brent Fikowski            None        \"\"                        #>  4 Björgvin Karl Guðmundsson 4860        \"CrossFit Hengill\"        #>  5 Saxon Panchik             22505       \"CrossFit Cliffside\"      #>  6 Jonne Koski               7526        \"CrossFit 10K\"            #>  7 Guilherme Malheiros       10585       \"Cavaleiros CrossFit\"     #>  8 Alex Vigneault            None        \"\"                        #>  9 Lazar Đukić               11487       \"CrossFit NS\"             #> 10 Noah Ohlsen               2509        \"Peak 360 CrossFit\"       #> 11 Scott Panchik             7991        \"CrossFit Mentality\"      #> 12 Travis Mayer              7104        \"CrossFit UNTD\"           #> 13 Jeffrey Adler             18059       \"CrossFit Wonderland\"     #> 14 Cole Sager                967         \"CrossFit Spokane Valley\" #> 15 André Houdet              859         \"CrossFit Butcher's Lab\"  #> 16 Royce Dunne               10767       \"CrossFit Torian\"         #> 17 Bayden Brown              3235        \"CrossFit Townsville\"     #> 18 Henrik Haapalainen        7050        \"CrossFit Basement\"       #> 19 Jayson Hopper             21951       \"CrossFit Simpsonville\"   #> 20 Will Moorad               4917        \"CrossFit Trivium\""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_open.html","id":null,"dir":"Reference","previous_headings":"","what":"CrossFit Open — cf_open","title":"CrossFit Open — cf_open","text":"cf_open() retrieves data CrossFit Open API, lightly pre-processed. need low level access API, use cf_request(). data returned API, empty tibble zero columns zero rows returned. typically need use tidyr::unnest_wider() tidyr::hoist() process data. function automatically paginate data. avoid overloading API, perform 100 requests per minute.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CrossFit Open — cf_open","text":"","code":"cf_open(   year,   ...,   division = cf_division$Men,   scale = cf_scale$rx,   affiliate = NULL,   n_pages = NULL,   progress = TRUE )"},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CrossFit Open — cf_open","text":"year year retrieve data . Note parameters valid past years. ... dots future extensions must empty. division division retrieve data . One values cf_division. scale workout scale retrieve data . One values cf_scale. affiliate optional integer ID retrieve data particular affiliate. n_pages optional integer limit number pages returned. page maximum 100 rows returned. useful just want explore data without downloading . specified, download available data. progress progress bar shown longer downloads?","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CrossFit Open — cf_open","text":"tibble.","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/cf_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CrossFit Open — cf_open","text":"","code":"library(tidyr) library(dplyr)  top_100 <- cf_open(2022, n_pages = 1)  top_100 %>%   unnest_wider(entrant) %>%   hoist(scores, one = 1) %>%   select(competitorName, one) %>%   unnest_wider(one) %>%   select(competitorName, score, breakdown) #> # A tibble: 100 × 3 #>    competitorName  score   breakdown                                             #>    <chr>           <chr>   <chr>                                                 #>  1 Saxon Panchik   3800000 \"12 rounds +\\n3 wall walks\\n12 db snatches\\n5 box ju… #>  2 Matt Poulin     3640000 \"12 rounds +\\n3 wall walks\\n1 db snatches\\n\"          #>  3 Justin Medeiros 3720000 \"12 rounds +\\n3 wall walks\\n9 db snatches\\n\"          #>  4 Colten Mertens  3610000 \"12 rounds +\\n1 wall walk\\n\"                          #>  5 Phil Toon       3630000 \"12 rounds +\\n3 wall walks\\n\"                         #>  6 Victor Ljungdal 3900000 \"13 rounds\\n\"                                         #>  7 Jay Crouch      3630000 \"12 rounds +\\n3 wall walks\\n\"                         #>  8 Scott Tetlow    3500000 \"11 rounds +\\n3 wall walks\\n12 db snatches\\n5 box ju… #>  9 Cédric Lapointe 3880000 \"12 rounds +\\n3 wall walks\\n12 db snatches\\n13 box j… #> 10 Dallin Pepper   3690000 \"12 rounds +\\n3 wall walks\\n6 db snatches\\n\"          #> # … with 90 more rows  # CrossFit Huntersville affiliate <- 16292  cf_open(2022, division = cf_division$Women, affiliate = affiliate) %>%   unnest_wider(entrant) %>%   hoist(scores, two = 2) %>%   select(competitorName, two) %>%   unnest_wider(two) %>%   select(competitorName, score, breakdown) #> # A tibble: 10 × 3 #>    competitorName     score   breakdown                                          #>    <chr>              <chr>   <chr>                                              #>  1 Kiera Caveny-Cox   1930000 \"2nd round of 4 +\\n3 deadlifts\\n2 bar-facing burp… #>  2 Jackie Asbury      1610000 \"2nd round of 7 +\\n3 deadlifts\\n\"                  #>  3 Devan Olschewske   1540000 \"2nd round of 8 +\\n7 deadlifts\\n3 bar-facing burp… #>  4 Erika Siedlaczek   1450000 \"2nd round of 8 +\\n1 deadlift\\n\"                   #>  5 Aurianna Alexander 1360000 \"2nd round of 9 +\\n8 deadlifts\\n\"                  #>  6 Kim McDonald       1410000 \"2nd round of 9 +\\n8 deadlifts\\n5 bar-facing burp… #>  7 Becky Goodrich     1090000 \"Round of 9 +\\n10 deadlifts\\n9 bar-facing burpees… #>  8 Moogie Fountain    1220000 \"Round of 10 +\\n9 deadlifts\\n3 bar-facing burpees… #>  9 Amanda Gorrod      1090000 \"Round of 9 +\\n10 deadlifts\\n9 bar-facing burpees… #> 10 Angela Garlock     1430000 \"2nd round of 9 +\\n8 deadlifts\\n7 bar-facing burp…"},{"path":"https://davisvaughan.github.io/crossfit/reference/crossfit-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crossfit: What the Package Does (One Line, Title Case) — crossfit-package","title":"crossfit: What the Package Does (One Line, Title Case) — crossfit-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://davisvaughan.github.io/crossfit/reference/crossfit-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"crossfit: What the Package Does (One Line, Title Case) — crossfit-package","text":"Maintainer: First Last first.last@example.com (ORCID)","code":""},{"path":"https://davisvaughan.github.io/crossfit/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. httr2 req_perform, resp_body_json","code":""}]
